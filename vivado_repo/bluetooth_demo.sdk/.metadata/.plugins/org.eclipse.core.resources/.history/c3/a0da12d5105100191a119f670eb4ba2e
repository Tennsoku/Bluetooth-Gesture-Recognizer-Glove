/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <string.h>
#include "platform.h"
#include "xil_printf.h"
#include "sensor_fusion_driver.h"
#include "xuartlite.h"


void sensor_fusion_handler(void *baseaddr_p) {
	sf_DisableInterrupt();
	sf_AckInterrupt();

	int pitch = SENSOR_FUSION_AXI_mReadReg(SF_DATA_ADDRESS, PITCH_OFFSET);
	int roll = SENSOR_FUSION_AXI_mReadReg(SF_DATA_ADDRESS, ROLL_OFFSET);
	int yaw = SENSOR_FUSION_AXI_mReadReg(SF_DATA_ADDRESS, YAW_OFFSET);
	int finger = SENSOR_FUSION_AXI_mReadReg(SF_DATA_ADDRESS, FINGER_OFFSET);

	xil_printf ("pitch = %d, roll = %d, yaw = %d, fingers = %d\r\n", pitch, roll, yaw, finger);


	char testbuffer[4] = {'T', 'E', 'S', 'T'};
//	snprintf(testbuffer, 70, "pitch = %4d, roll = %4d, yaw = %4d, fingers = %4d\x20", pitch, roll, yaw, finger);
	XUartLite_Send(BT_BASEADDRESS, (u8*) testbuffer, 4);

	sf_EnableInterrupt();
}

int main()
{
    init_platform();
    microblaze_enable_interrupts();
    XIntc_RegisterHandler(XPAR_INTC_0_BASEADDR, XPAR_MICROBLAZE_0_AXI_INTC_SENSOR_FUSION_AXI_0_IRQ_INTR,
            (XInterruptHandler)sensor_fusion_handler, (void*)SF_DATA_ADDRESS);


    XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
    XIntc_EnableIntr(XPAR_INTC_0_BASEADDR, XPAR_SENSOR_FUSION_AXI_0_IRQ_MASK);
    sf_GlobalEnableInterrupt();
    sf_EnableInterrupt();

    print("Starting Sensor Readings\n\r");
    SENSOR_FUSION_AXI_mWriteReg(SF_DATA_ADDRESS, 0x0, 0x1);

    while(1) {

    }

    cleanup_platform();
    return 0;
}
